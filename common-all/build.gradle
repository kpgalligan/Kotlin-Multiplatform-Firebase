apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def     kotlinJsOutputFile = "common-all.js"
def firebaseFunctionsPath = "../firebase/functions/src"
def firebaseFunctionsMain = firebaseFunctionsPath + '/main'
def firebaseFunctionsTest = firebaseFunctionsPath + '/test'
def cInteropFirestorePath = "$projectDir/src/iOSMain/c_interop/firestore"

kotlin {

    targets {
        def workingDir = buildscript.sourceFile.getParent()

        fromPreset(presets.iosX64, 'iOS') {
            compilations.main {
                outputKinds('FRAMEWORK')
                cinterops {
                    firestore {
                        packageName 'com.firebase.firestore'
                        defFile = file("${cInteropFirestorePath}/FirebaseFirestore.def")
                        includeDirs "${cInteropFirestorePath}/FirebaseFirestore.framework/Headers"
                    }
                }

                linkerOpts "-F${cInteropFirestorePath}"
                linkerOpts '-rpath', '@executable_path/Frameworks'
                linkerOpts "-F${workingDir}"
            }
        }

        fromPreset(presets.js, 'js') {

            compileTestKotlinJs.kotlinOptions {
                moduleKind = "commonjs"
                metaInfo = true
                sourceMap = true
            }

            compileKotlinJs.kotlinOptions {
                moduleKind = "commonjs"
                metaInfo = true
                sourceMap = true
            }
        }
        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jsMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
//                implementation "org.jetbrains.kotlin:kotlin-test-annotations"

            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation 'com.google.firebase:firebase-firestore:17.1.0'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }

        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        iOSMain {
            dependsOn commonMain
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            }
        }
    }
}

// Fix ambigous configuration for dependencies
kotlin.targets.matching { it.platformType.name == 'native' }.all {
    compilations.all {
        cinterops.all {
            configurations[dependencyConfigurationName].attributes.attribute(
                Usage.USAGE_ATTRIBUTE,
                objects.named(Usage, 'kotlin-api')
            )
        }
    }
}

task listConfigs {
    doLast {
        configurations.iOSMainImplementation.each { println it.name }
    }
}

clean.doFirst {
    delete "${rootDir}/firebase/functions/src"
}

task copyCommonJsFirebaseModules(type: Copy) {
    from compileKotlinJs.destinationDir
    into firebaseFunctionsMain
}

task copyCompileTestKotlinJsToFirebase(type: Copy) {
    from compileTestKotlinJs.destinationDir
    into firebaseFunctionsTest
}

task firebaseDeploy(type: Exec) {
    workingDir '../firebase'
    commandLine 'firebase', 'deploy'
}

task firebaseTest(type: Exec) {
    workingDir '../firebase/functions'
    commandLine 'npm', 'test'
}

task firebaseDeployLocaly(type: Exec) {
    workingDir '../firebase'
    commandLine 'firebase', 'functions:shell'
}

task serializationRefToLocalModule {
  doLast {
    def serialization = 'kotlinx-serialization-runtime-js'

    ant.replaceregexp(match: "$serialization", replace: "../../$serialization-0.9.0/$serialization", flags: 'g', byline: true) {
      fileset(dir: "$firebaseFunctionsMain", includes: kotlinJsOutputFile)
    }
  }
}

//firebaseTest
firebaseTest.dependsOn(copyCompileTestKotlinJsToFirebase)
copyCompileTestKotlinJsToFirebase.dependsOn(compileTestKotlinJs)
//

//firebaseDeploy
firebaseDeploy.dependsOn(serializationRefToLocalModule)
serializationRefToLocalModule.dependsOn(copyCommonJsFirebaseModules)
copyCommonJsFirebaseModules.dependsOn(compileKotlinJs)
//